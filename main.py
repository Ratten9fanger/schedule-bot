import requests
from bs4 import BeautifulSoup
from aiogram import types, Bot, Dispatcher, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import asyncio
from datetime import datetime, timedelta
import pytz

def GetScheduleDict(scheduleUrl):
    res = requests.get(scheduleUrl)
    soup = BeautifulSoup(res.content, 'lxml')
    tbody = soup.find('table', class_='inf')
    rows = tbody.find_all('tr')

    schedule = {
        4: {'main': {'name': '', 'prep': '', 'cab': ''}, 'add': {'name': '', 'prep': '', 'cab': ''}},
        5: {'main': {'name': '', 'prep': '', 'cab': ''}, 'add': {'name': '', 'prep': '', 'cab': ''}},
        6: {'main': {'name': '', 'prep': '', 'cab': ''}, 'add': {'name': '', 'prep': '', 'cab': ''}},
        7: {'main': {'name': '', 'prep': '', 'cab': ''}, 'add': {'name': '', 'prep': '', 'cab': ''}},
        8: {'main': {'name': '', 'prep': '', 'cab': ''}, 'add': {'name': '', 'prep': '', 'cab': ''}},
        9: {'main': {'name': '', 'prep': '', 'cab': ''}, 'add': {'name': '', 'prep': '', 'cab': ''}},
        10: {'main': {'name': '', 'prep': '', 'cab': ''}, 'add': {'name': '', 'prep': '', 'cab': ''}}
    }

    cells = {}
    limit = 0

    for j in rows:
        if limit <= 10:
            limit += 1
            cells[limit] = j.find_all('td', class_='ur')

    for i in cells:
        if i not in schedule:
            continue

        isMain = True
        if len(cells[i]) > 1:
            for cell in cells[i]:
                if isMain:
                    if cell.find('a', class_='z1') is not None:
                        schedule[i]['main']['name'] = cell.find('a', class_='z1').text
                    # else:
                    #     schedule[i]['main']['name'] = '–£ —ç—Ç–æ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã –Ω–µ—Ç –ø–∞—Ä—ã'
                    #     print('no')

                    if cell.find('a', class_='z3') is not None:
                        schedule[i]['main']['prep'] = cell.find('a', class_='z3').text
                    if cell.find('a', class_='z2') is not None:
                        schedule[i]['main']['cab'] = cell.find('a', class_='z2').text
                else:
                    if cell.find('a', class_='z1') is not None:
                        schedule[i]['add']['name'] = cell.find('a', class_='z1').text
                    # else:
                    #     schedule[i]['add']['name'] = '–£ —ç—Ç–æ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã –Ω–µ—Ç –ø–∞—Ä—ã'
                    #     print('no')

                    if cell.find('a', class_='z3') is not None:
                        schedule[i]['add']['prep'] = cell.find('a', class_='z3').text
                    if cell.find('a', class_='z2') is not None:
                        schedule[i]['add']['cab'] = cell.find('a', class_='z2').text
                isMain = False
        else:
            for cell in cells[i]:
                if cell.find('a', class_='z1') is not None:
                    schedule[i]['main']['name'] = cell.find('a', class_='z1').text
                if cell.find('a', class_='z3') is not None:
                    schedule[i]['main']['prep'] = cell.find('a', class_='z3').text
                if cell.find('a', class_='z2') is not None:
                    schedule[i]['main']['cab'] = cell.find('a', class_='z2').text

    return schedule

def GetScheduleText(schedule_dict):
    output_text = ""
    
    for day, subjects in schedule_dict.items():
        output_text += f"<b>üìÖ –ü–∞—Ä–∞ {day - 3}:</b>\n"
        
        for key in ['main', 'add']:
            subject = subjects[key]
            subject_info = []
            
            # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ, –ø—Ä–æ–ø—É—Å–∫–∞—è –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
            if subject['name']:
                subject_info.append(f"\n\t\t\t\t\t\t\t\t{subject['name']}")
            if subject['prep']:
                subject_info.append(f"\t\t\t\t\t\t\t\t{subject['prep']}")
            if subject['cab']:
                subject_info.append(f"\t\t\t\t\t\t\t\t{subject['cab']}")
            
            if subject_info:
                output_text += "<b>"
                output_text += "\n".join(subject_info)
                output_text += "</b>\n"
            # else:
            #     output_text += "<b>‚Äî</b>\n"
        
        output_text += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –¥–Ω—è–º–∏
    
    return output_text.strip()

url = ''
user_id = ''
user_data = {}
schedule_time = """
I –ø–∞—Ä–∞:
  08:30 - 09:10
  09:15 - 10:00
II –ø–∞—Ä–∞:
  10:10 - 10:50
  10:55 - 11:40
  –û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ 30 –º–∏–Ω.
III –ø–∞—Ä–∞:
  12:10 - 12:50
  12:55 - 13:40
IV –ø–∞—Ä–∞:
  13:50 - 14:30
  14:35 - 15:20
V –ø–∞—Ä–∞:
  15:30 - 16:50
VI –ø–∞—Ä–∞:
  17:00 - 18:20

–°—Ä–µ–¥–∞
08:30 - 08:50 - –ö–ª–∞—Å—Å–Ω—ã–π —á–∞—Å
–Ü –ø–∞—Ä–∞:
  09:00 - 09:40
  09:45 - 10:30
II –ø–∞—Ä–∞:
  10:40 - 11:20
  11:25 - 12:10
  –û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ 20 –º–∏–Ω.
III –ø–∞—Ä–∞:
  12:30 - 13:10
  13:15 - 14:00
IV –ø–∞—Ä–∞:
  14:10 - 14:50
  14:55 - 15:40
V –ø–∞—Ä–∞:
  15:50 - 17:10
VI –ø–∞—Ä–∞:
  17:20 - 18:40
"""

bot = Bot('7565630801:AAEJS3zZtetuZL2AW3Pit-QYz4ijVb9obuk')
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞"))
keyboard.add(KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ"))
keyboard.add(KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"))

@dp.message_handler(commands='start')
async def start(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {'url': ''}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø - –ë–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –°–ö–°–∏–ü–¢\n–Ø –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω—É–∂–Ω–æ–µ –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ 17:30 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –ù–ï–î–ï–õ–¨–ù–û–ì–û —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã\n–û–Ω–∞ –±—É–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤–∑—è—Ç–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–º, –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–µ –ë–£–î–ï–¢.\n–£—á—Ç–∏—Ç–µ, —á—Ç–æ —Å—Å—ã–ª–∫–∏ –º–µ–Ω—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π —Å–µ–º–µ—Å—Ç—Ä!\n–ü—Ä–∏–º–µ—Ä: http://schedule.ckstr.ru/cg142.htm\n\n<pre>–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ beta-test –≤–µ—Ä—Å–∏–∏ –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç —Ä–∞–±–æ—Ç—É 20.02.25</pre>",
        reply_markup=keyboard, parse_mode='html'
    )

@dp.message_handler(lambda message: message.text.startswith('http://schedule.ckstr.ru/cg'))
async def capture_url(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'url': ''}
    user_data[user_id]['url'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.reply("–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ 17:30 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –µ–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –Ω–æ–≤—É—é –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–º–µ–Ω—é —Ü–µ–ª–µ–≤—É—é —Å—Å—ã–ª–∫—É", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞")
async def show_current_url(message: types.Message):
    user_id = message.from_user.id
    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥.")
    await asyncio.sleep(5)
    if user_id in user_data and user_data[user_id]['url']:
        await message.answer(f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {user_data[user_id]['url']}")
    else:
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

@dp.message_handler(lambda message: message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤")
async def show_current_url(message: types.Message):
    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ")
    await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥
    await message.answer(text=schedule_time)

@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ")
async def force_get_schedule(message: types.Message):
    user_id = message.from_user.id
    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥.")
    await asyncio.sleep(5)
    if user_id in user_data and user_data[user_id]['url']:
        temp = GetScheduleDict(user_data[user_id]['url'])
        res = GetScheduleText(temp)
        await message.answer(text=res, parse_mode='html')
    else:
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

async def on_startup(dp):
    asyncio.create_task(send_message_at_time())

async def send_message_at_time():
    ekaterinburg_tz = pytz.timezone('Asia/Yekaterinburg')

    while True:
        now = datetime.now(ekaterinburg_tz)
        target_time = now.replace(hour=21, minute=50, second=0, microsecond=0)
        
        if now > target_time:
            target_time += timedelta(days=1)
        
        wait_time = (target_time - now).total_seconds()
        await asyncio.sleep(wait_time)
        
        if target_time.weekday() < 6:  # 0-4 ‚Äî –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞
            for user_id, data in user_data.items():
                if data['url']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    temp = GetScheduleDict(data['url'])
                    res = GetScheduleText(temp)
                    await bot.send_message(user_id, text=res, parse_mode='html', reply_markup=keyboard)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
